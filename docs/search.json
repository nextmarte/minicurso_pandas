[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "",
    "text": "O objetivo deste minicurso é apresentar os principais conceitos da biblioteca Pandas, que é uma das mais utilizadas para análise de dados em Python."
  },
  {
    "objectID": "index.html#instalação",
    "href": "index.html#instalação",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Instalação",
    "text": "Instalação\nPara instalar o Pandas, basta executar o comando abaixo no terminal: pip install pandas"
  },
  {
    "objectID": "index.html#importando-o-pandas",
    "href": "index.html#importando-o-pandas",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Importando o Pandas",
    "text": "Importando o Pandas\nPara importar o Pandas e numpy, basta executar o comando abaixo:\n\nimport numpy as np\nimport pandas as pd"
  },
  {
    "objectID": "index.html#criando-um-data-frame-com-pandas-e-numpy",
    "href": "index.html#criando-um-data-frame-com-pandas-e-numpy",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Criando um data frame com pandas e numpy",
    "text": "Criando um data frame com pandas e numpy\nPara criar um data frame com pandas e numpy, basta executar o comando abaixo:\n\n\nClique para ver o código\n\n\n# criando um array com numpy notas vs horas de estudo\n\narray = np.array([[2, 50], [4, 60], [6, 70], [8, 80], [10, 90]])\n\n# cria as variáveis para o data frame\n\nvariaveis = ['horas de estudo', 'notas']\n\n# cria o data frame\n\ndata_frame = pd.DataFrame(array, columns=variaveis)\n\n# imprime o data frame\n\nprint(data_frame)\n\n# plota o gráfico\n\ndata_frame.plot(x='horas de estudo', y='notas', kind='scatter',\n                title='Notas x Horas de Estudo')\n\n# exporta pro excel com a biblioteca openpyxl\n\n# data_frame.to_excel('data_frame.xlsx', sheet_name='data_frame')\n\n   horas de estudo  notas\n0                2     50\n1                4     60\n2                6     70\n3                8     80\n4               10     90\n\n\n&lt;Axes: title={'center': 'Notas x Horas de Estudo'}, xlabel='horas de estudo', ylabel='notas'&gt;"
  },
  {
    "objectID": "index.html#adicionar-e-manipular-variáveis-no-data-frame",
    "href": "index.html#adicionar-e-manipular-variáveis-no-data-frame",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Adicionar e manipular variáveis no data frame",
    "text": "Adicionar e manipular variáveis no data frame\n\n\nClique para ver o código\n\n\n# adiciona uma nova coluna ao data frame\n\ndata_frame['notas2'] = data_frame['notas']/2\n\nprint(data_frame)\n\n   horas de estudo  notas  notas2\n0                2     50    25.0\n1                4     60    30.0\n2                6     70    35.0\n3                8     80    40.0\n4               10     90    45.0"
  },
  {
    "objectID": "index.html#salvando-uma-coluna-do-data-frame-em-uma-variável",
    "href": "index.html#salvando-uma-coluna-do-data-frame-em-uma-variável",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Salvando uma coluna do data frame em uma variável",
    "text": "Salvando uma coluna do data frame em uma variável\n\n\nClique para ver o código\n\n\nnotas = data_frame['notas']\n\nprint(notas)\n\n0    50\n1    60\n2    70\n3    80\n4    90\nName: notas, dtype: int32"
  },
  {
    "objectID": "index.html#selecionar-a-segunda-e-a-terceira-variavel-do-data-frame-com-o-índice-das-variáveis",
    "href": "index.html#selecionar-a-segunda-e-a-terceira-variavel-do-data-frame-com-o-índice-das-variáveis",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Selecionar a segunda e a terceira variavel do data frame com o índice das variáveis",
    "text": "Selecionar a segunda e a terceira variavel do data frame com o índice das variáveis\n\n\nClique para ver o código\n\n\ndata_frame2 = data_frame.iloc[:, 1:3]\n\nprint(data_frame2)\n\n   notas  notas2\n0     50    25.0\n1     60    30.0\n2     70    35.0\n3     80    40.0\n4     90    45.0"
  },
  {
    "objectID": "index.html#selecionar-a-segunda-e-a-terceira-variavel-do-data-frame-com-o-nome-das-variáveis",
    "href": "index.html#selecionar-a-segunda-e-a-terceira-variavel-do-data-frame-com-o-nome-das-variáveis",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Selecionar a segunda e a terceira variavel do data frame com o nome das variáveis",
    "text": "Selecionar a segunda e a terceira variavel do data frame com o nome das variáveis\n\n\nClique para ver o código\n\n\ndata_frame2 = data_frame[['notas', 'notas2']]\n\nprint(data_frame2)\n\n   notas  notas2\n0     50    25.0\n1     60    30.0\n2     70    35.0\n3     80    40.0\n4     90    45.0"
  },
  {
    "objectID": "index.html#selecionar-as-linhas-do-data-frame-com-o-índice-das-linhas",
    "href": "index.html#selecionar-as-linhas-do-data-frame-com-o-índice-das-linhas",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Selecionar as linhas do data frame com o índice das linhas",
    "text": "Selecionar as linhas do data frame com o índice das linhas\n\n\nClique para ver o código\n\n\n# seleciona as linhas 1 e 2 do data frame\n\ndata_frame2 = data_frame.iloc[1:3, :]\n\nprint(data_frame2)\n\n   horas de estudo  notas  notas2\n1                4     60    30.0\n2                6     70    35.0"
  },
  {
    "objectID": "index.html#filtranado-o-data-frame-com-base-em-uma-condição",
    "href": "index.html#filtranado-o-data-frame-com-base-em-uma-condição",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Filtranado o data frame com base em uma condição",
    "text": "Filtranado o data frame com base em uma condição\n\n\nClique para ver o código\n\n\ndata_frame2 = data_frame[data_frame['notas'] &gt; 70]\n\nprint(data_frame2)\n\n   horas de estudo  notas  notas2\n3                8     80    40.0\n4               10     90    45.0"
  },
  {
    "objectID": "index.html#filtranado-o-data-frame-com-base-em-duas-condições-com-o-operador",
    "href": "index.html#filtranado-o-data-frame-com-base-em-duas-condições-com-o-operador",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Filtranado o data frame com base em duas condições com o operador &",
    "text": "Filtranado o data frame com base em duas condições com o operador &\n\n\nClique para ver o código\n\n\ndata_frame2 = data_frame[(data_frame['notas'] &gt; 70) &\n                         (data_frame['horas de estudo'] &gt; 8)]\n\nprint(data_frame2)\n\n   horas de estudo  notas  notas2\n4               10     90    45.0"
  },
  {
    "objectID": "index.html#importando-um-arquivo-csv-para-o-data-frame",
    "href": "index.html#importando-um-arquivo-csv-para-o-data-frame",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Importando um arquivo csv para o data frame",
    "text": "Importando um arquivo csv para o data frame\n\n\nClique para ver o código\n\n\ndata_frame = pd.read_csv('data_frame.csv')"
  },
  {
    "objectID": "index.html#exercício",
    "href": "index.html#exercício",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "Exercício",
    "text": "Exercício\nCrie um data frame 3x4 com as seguintes variáveis: Maria, Joao, Pedro e Marcus. Cada observação deverá conter um número aleatório de 0 a 100. Depois, crie uma nova variável chamada “Média” que contenha a média das notas de cada observação. Por fim, salve o data frame em um arquivo csv.\n\n\n\n\n\n\nDica!\n\n\n\nUse a função np.random.randint para gerar os números aleatórios. Aproveite e explique essa função.\n\n\nDepois de criar o data frame, crie uma nova variável chamada “Média” que contenha a média das notas de cada observação.\nRespostas\n\n\nClique para ver a resposta\n\n\n# vamos criar um array com numpy\n\narray = np.random.randint(0, 100, size=(3, 4))\n\n# cria as variáveis para o data frame\n\nvariaveis = ['Maria', 'Joao', 'Pedro', 'Marcus']\n\n# cria o data frame\n\ndata_frame3 = pd.DataFrame(array, columns=variaveis)\n\n# cria a variável média\n\ndata_frame3['Média'] = data_frame3.mean(axis=1)\n\nprint(data_frame3)\n\n   Maria  Joao  Pedro  Marcus  Média\n0     15    18     93      34   40.0\n1     17    67     80      26   47.5\n2     91    40     19      64   53.5"
  },
  {
    "objectID": "index.html#agora-vamos-plotar-um-gráfico-de-barras-com-o-data-frame",
    "href": "index.html#agora-vamos-plotar-um-gráfico-de-barras-com-o-data-frame",
    "title": "Minicurso Ultra Rápido de Pandas",
    "section": "agora vamos plotar um gráfico de barras com o data frame",
    "text": "agora vamos plotar um gráfico de barras com o data frame\n\n# plota o gráfico\n\ndata_frame3.plot(x='Média', y=variaveis, kind='bar',\n                 title='Notas x Alunos')\n\n&lt;Axes: title={'center': 'Notas x Alunos'}, xlabel='Média'&gt;"
  },
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "Minicurso de pandas",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\npd.set_option('display.float_format',lambda x: '%.2f' % x)\n\n\nfile='https://raw.githubusercontent.com/AlexTheAnalyst/PandasYouTubeSeries/main/world_population.csv'\n\n#lendo o arquivo csv direto do github e criando um dataframe\n\ndf = pd.read_csv(file)\n\ndf\n\n\n\n\n\n\n\n\nRank\nCCA3\nCountry\nCapital\nContinent\n2022 Population\n2020 Population\n2015 Population\n2010 Population\n2000 Population\n1990 Population\n1980 Population\n1970 Population\nArea (km²)\nDensity (per km²)\nGrowth Rate\nWorld Population Percentage\n\n\n\n\n0\n36\nAFG\nAfghanistan\nKabul\nAsia\n41128771.00\n38972230.00\n33753499.00\n28189672.00\n19542982.00\n10694796.00\n12486631.00\n10752971.00\n652230.00\n63.06\n1.03\n0.52\n\n\n1\n138\nALB\nAlbania\nTirana\nEurope\n2842321.00\n2866849.00\n2882481.00\n2913399.00\n3182021.00\n3295066.00\n2941651.00\n2324731.00\n28748.00\n98.87\n1.00\n0.04\n\n\n2\n34\nDZA\nAlgeria\nAlgiers\nAfrica\n44903225.00\n43451666.00\n39543154.00\n35856344.00\n30774621.00\n25518074.00\n18739378.00\n13795915.00\n2381741.00\n18.85\n1.02\n0.56\n\n\n3\n213\nASM\nAmerican Samoa\nPago Pago\nOceania\n44273.00\n46189.00\n51368.00\n54849.00\n58230.00\n47818.00\n32886.00\n27075.00\n199.00\n222.48\n0.98\n0.00\n\n\n4\n203\nAND\nAndorra\nAndorra la Vella\nEurope\n79824.00\n77700.00\n71746.00\n71519.00\n66097.00\n53569.00\n35611.00\n19860.00\n468.00\n170.56\n1.01\n0.00\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\n226\nWLF\nWallis and Futuna\nMata-Utu\nOceania\n11572.00\n11655.00\n12182.00\n13142.00\n14723.00\n13454.00\n11315.00\n9377.00\n142.00\n81.49\n1.00\n0.00\n\n\n230\n172\nESH\nWestern Sahara\nEl Aaiún\nAfrica\n575986.00\n556048.00\n491824.00\n413296.00\n270375.00\n178529.00\n116775.00\n76371.00\n266000.00\n2.17\n1.02\n0.01\n\n\n231\n46\nYEM\nYemen\nSanaa\nAsia\n33696614.00\n32284046.00\n28516545.00\n24743946.00\n18628700.00\n13375121.00\n9204938.00\n6843607.00\n527968.00\n63.82\n1.02\n0.42\n\n\n232\n63\nZMB\nZambia\nLusaka\nAfrica\n20017675.00\n18927715.00\nNaN\n13792086.00\n9891136.00\n7686401.00\n5720438.00\n4281671.00\n752612.00\n26.60\n1.03\n0.25\n\n\n233\n74\nZWE\nZimbabwe\nHarare\nAfrica\n16320537.00\n15669666.00\n14154937.00\n12839771.00\n11834676.00\n10113893.00\n7049926.00\n5202918.00\n390757.00\n41.77\n1.02\n0.20\n\n\n\n\n234 rows × 17 columns\n\n\n\n\ndf.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 234 entries, 0 to 233\nData columns (total 17 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  \n 0   Rank                         234 non-null    int64  \n 1   CCA3                         234 non-null    object \n 2   Country                      234 non-null    object \n 3   Capital                      234 non-null    object \n 4   Continent                    234 non-null    object \n 5   2022 Population              230 non-null    float64\n 6   2020 Population              233 non-null    float64\n 7   2015 Population              230 non-null    float64\n 8   2010 Population              227 non-null    float64\n 9   2000 Population              227 non-null    float64\n 10  1990 Population              229 non-null    float64\n 11  1980 Population              229 non-null    float64\n 12  1970 Population              230 non-null    float64\n 13  Area (km²)                   232 non-null    float64\n 14  Density (per km²)            230 non-null    float64\n 15  Growth Rate                  232 non-null    float64\n 16  World Population Percentage  234 non-null    float64\ndtypes: float64(12), int64(1), object(4)\nmemory usage: 31.2+ KB\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nRank\n2022 Population\n2020 Population\n2015 Population\n2010 Population\n2000 Population\n1990 Population\n1980 Population\n1970 Population\nArea (km²)\nDensity (per km²)\nGrowth Rate\nWorld Population Percentage\n\n\n\n\ncount\n234.00\n230.00\n233.00\n230.00\n227.00\n227.00\n229.00\n229.00\n230.00\n232.00\n230.00\n232.00\n234.00\n\n\nmean\n117.50\n34632250.88\n33600710.95\n32066004.16\n30270164.48\n26840495.26\n19330463.93\n16282884.78\n15866499.13\n581663.75\n456.81\n1.01\n0.43\n\n\nstd\n67.69\n137889172.44\n135873196.61\n131507146.34\n126074183.54\n113352454.57\n81309624.96\n69345465.54\n68355859.75\n1769133.06\n2083.74\n0.01\n1.71\n\n\nmin\n1.00\n510.00\n520.00\n564.00\n596.00\n651.00\n700.00\n733.00\n752.00\n1.00\n0.03\n0.91\n0.00\n\n\n25%\n59.25\n419738.50\n406471.00\n394295.00\n382726.50\n329470.00\n261928.00\n223752.00\n145880.50\n2567.25\n36.60\n1.00\n0.01\n\n\n50%\n117.50\n5762857.00\n5456681.00\n5244415.00\n4889741.00\n4491202.00\n3785847.00\n3135123.00\n2511718.00\n77141.00\n95.35\n1.01\n0.07\n\n\n75%\n175.75\n22653719.00\n21522626.00\n19730853.75\n16825852.50\n15625467.00\n11882762.00\n9817257.00\n8817329.00\n414643.25\n236.88\n1.02\n0.28\n\n\nmax\n234.00\n1425887337.00\n1424929781.00\n1393715448.00\n1348191368.00\n1264099069.00\n1153704252.00\n982372466.00\n822534450.00\n17098242.00\n23172.27\n1.07\n17.88\n\n\n\n\n\n\n\n\ndf.isnull().sum()\n\nRank                           0\nCCA3                           0\nCountry                        0\nCapital                        0\nContinent                      0\n2022 Population                4\n2020 Population                1\n2015 Population                4\n2010 Population                7\n2000 Population                7\n1990 Population                5\n1980 Population                5\n1970 Population                4\nArea (km²)                     2\nDensity (per km²)              4\nGrowth Rate                    2\nWorld Population Percentage    0\ndtype: int64\n\n\n\ndf.nunique()\n\nRank                           234\nCCA3                           234\nCountry                        234\nCapital                        234\nContinent                        6\n2022 Population                230\n2020 Population                233\n2015 Population                230\n2010 Population                227\n2000 Population                227\n1990 Population                229\n1980 Population                229\n1970 Population                230\nArea (km²)                     231\nDensity (per km²)              230\nGrowth Rate                    178\nWorld Population Percentage     70\ndtype: int64\n\n\n\ndf.sort_values(by=\"World Population Percentage\", ascending=False).head(10)\n\n\n\n\n\n\n\n\nRank\nCCA3\nCountry\nCapital\nContinent\n2022 Population\n2020 Population\n2015 Population\n2010 Population\n2000 Population\n1990 Population\n1980 Population\n1970 Population\nArea (km²)\nDensity (per km²)\nGrowth Rate\nWorld Population Percentage\n\n\n\n\n41\n1\nCHN\nChina\nBeijing\nAsia\n1425887337.00\n1424929781.00\n1393715448.00\n1348191368.00\n1264099069.00\n1153704252.00\n982372466.00\n822534450.00\n9706961.00\n146.89\n1.00\n17.88\n\n\n92\n2\nIND\nIndia\nNew Delhi\nAsia\n1417173173.00\n1396387127.00\n1322866505.00\n1240613620.00\n1059633675.00\nNaN\nNaN\n557501301.00\n3287590.00\n431.07\n1.01\n17.77\n\n\n221\n3\nUSA\nUnited States\nWashington, D.C.\nNorth America\n338289857.00\n335942003.00\n324607776.00\n311182845.00\n282398554.00\n248083732.00\n223140018.00\n200328340.00\n9372610.00\n36.09\n1.00\n4.24\n\n\n93\n4\nIDN\nIndonesia\nJakarta\nAsia\n275501339.00\n271857970.00\n259091970.00\n244016173.00\n214072421.00\n182159874.00\n148177096.00\n115228394.00\n1904569.00\n144.65\n1.01\n3.45\n\n\n156\n5\nPAK\nPakistan\nIslamabad\nAsia\n235824862.00\n227196741.00\n210969298.00\n194454498.00\n154369924.00\n115414069.00\n80624057.00\n59290872.00\n881912.00\n267.40\n1.02\n2.96\n\n\n149\n6\nNGA\nNigeria\nAbuja\nAfrica\n218541212.00\n208327405.00\n183995785.00\n160952853.00\n122851984.00\n95214257.00\n72951439.00\n55569264.00\n923768.00\n236.58\n1.02\n2.74\n\n\n27\n7\nBRA\nBrazil\nBrasilia\nSouth America\n215313498.00\n213196304.00\n205188205.00\n196353492.00\n175873720.00\n150706446.00\n122288383.00\n96369875.00\n8515767.00\n25.28\n1.00\n2.70\n\n\n16\n8\nBGD\nBangladesh\nDhaka\nAsia\n171186372.00\n167420951.00\n157830000.00\n148391139.00\n129193327.00\n107147651.00\n83929765.00\n67541860.00\n147570.00\n1160.04\n1.01\n2.15\n\n\n171\n9\nRUS\nRussia\nMoscow\nEurope\n144713314.00\n145617329.00\n144668389.00\n143242599.00\n146844839.00\n148005704.00\n138257420.00\n130093010.00\n17098242.00\n8.46\n1.00\n1.81\n\n\n131\n10\nMEX\nMexico\nMexico City\nNorth America\n127504125.00\n125998302.00\n120149897.00\n112532401.00\n97873442.00\n81720428.00\n67705186.00\n50289306.00\n1964375.00\n64.91\n1.01\n1.60\n\n\n\n\n\n\n\n\ndf.corr()\n\nC:\\Users\\nextm\\AppData\\Local\\Temp\\ipykernel_9008\\1134722465.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  df.corr()\n\n\n\n\n\n\n\n\n\nRank\n2022 Population\n2020 Population\n2015 Population\n2010 Population\n2000 Population\n1990 Population\n1980 Population\n1970 Population\nArea (km²)\nDensity (per km²)\nGrowth Rate\nWorld Population Percentage\n\n\n\n\nRank\n1.00\n-0.36\n-0.36\n-0.35\n-0.35\n-0.34\n-0.33\n-0.33\n-0.34\n-0.38\n0.13\n-0.22\n-0.36\n\n\n2022 Population\n-0.36\n1.00\n1.00\n1.00\n1.00\n0.99\n0.99\n0.99\n0.97\n0.45\n-0.03\n-0.02\n1.00\n\n\n2020 Population\n-0.36\n1.00\n1.00\n1.00\n1.00\n1.00\n0.99\n0.99\n0.98\n0.45\n-0.03\n-0.03\n1.00\n\n\n2015 Population\n-0.35\n1.00\n1.00\n1.00\n1.00\n1.00\n0.99\n0.99\n0.98\n0.46\n-0.03\n-0.03\n1.00\n\n\n2010 Population\n-0.35\n1.00\n1.00\n1.00\n1.00\n1.00\n1.00\n0.99\n0.98\n0.46\n-0.03\n-0.04\n1.00\n\n\n2000 Population\n-0.34\n0.99\n1.00\n1.00\n1.00\n1.00\n1.00\n1.00\n0.99\n0.47\n-0.03\n-0.05\n0.99\n\n\n1990 Population\n-0.33\n0.99\n0.99\n0.99\n1.00\n1.00\n1.00\n1.00\n1.00\n0.52\n-0.03\n-0.07\n0.99\n\n\n1980 Population\n-0.33\n0.99\n0.99\n0.99\n0.99\n1.00\n1.00\n1.00\n1.00\n0.53\n-0.03\n-0.08\n0.99\n\n\n1970 Population\n-0.34\n0.97\n0.98\n0.98\n0.98\n0.99\n1.00\n1.00\n1.00\n0.51\n-0.03\n-0.08\n0.97\n\n\nArea (km²)\n-0.38\n0.45\n0.45\n0.46\n0.46\n0.47\n0.52\n0.53\n0.51\n1.00\n-0.06\n-0.01\n0.45\n\n\nDensity (per km²)\n0.13\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.06\n1.00\n-0.07\n-0.03\n\n\nGrowth Rate\n-0.22\n-0.02\n-0.03\n-0.03\n-0.04\n-0.05\n-0.07\n-0.08\n-0.08\n-0.01\n-0.07\n1.00\n-0.02\n\n\nWorld Population Percentage\n-0.36\n1.00\n1.00\n1.00\n1.00\n0.99\n0.99\n0.99\n0.97\n0.45\n-0.03\n-0.02\n1.00\n\n\n\n\n\n\n\n\nsns.heatmap(df.corr(), annot=True)\n\nplt.rcParams['figure.figsize'] = (10, 10)\n\nplt.show()\n\nC:\\Users\\nextm\\AppData\\Local\\Temp\\ipykernel_9008\\2951679599.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n  sns.heatmap(df.corr(), annot=True)\n\n\n\n\n\n\n# agrupando o df por continente\n\ndf.groupby('Continent').mean().sort_values(by=\"2022 Population\", ascending=False)\n\nC:\\Users\\nextm\\AppData\\Local\\Temp\\ipykernel_9008\\1590826238.py:3: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  df.groupby('Continent').mean().sort_values(by=\"2022 Population\", ascending=False)\n\n\n\n\n\n\n\n\n\nRank\n2022 Population\n2020 Population\n2015 Population\n2010 Population\n2000 Population\n1990 Population\n1980 Population\n1970 Population\nArea (km²)\nDensity (per km²)\nGrowth Rate\nWorld Population Percentage\n\n\nContinent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAsia\n77.56\n96327387.31\n94955134.37\n89165003.64\n89087770.00\n80580835.11\n48639995.33\n40278333.33\n43839877.83\n642762.82\n1025.02\n1.01\n1.18\n\n\nSouth America\n97.57\n31201186.29\n30823574.50\n29509599.71\n26789395.54\n25015888.69\n21224743.93\n17270643.29\n13781939.71\n1301302.85\n20.97\n1.01\n0.39\n\n\nAfrica\n92.16\n25455879.68\n23871435.26\n21419703.57\n18898197.31\n14598365.95\n11376964.52\n8586031.98\n6567175.27\n537879.30\n126.41\n1.02\n0.31\n\n\nEurope\n124.50\n15055371.82\n14915843.92\n15027454.12\n14712278.68\n14817685.71\n14785203.94\n14200004.52\n13118479.82\n460208.22\n663.32\n1.00\n0.19\n\n\nNorth America\n160.93\n15007403.40\n14855914.82\n14259596.25\n13568016.28\n12151739.60\n10531660.62\n9207334.03\n7885865.15\n606104.45\n272.49\n1.00\n0.19\n\n\nOceania\n188.52\n2046386.32\n1910148.96\n1756664.48\n1613163.65\n1357512.09\n1162774.87\n996532.17\n846968.26\n370220.91\n132.54\n1.01\n0.02\n\n\n\n\n\n\n\n\ndf2=df.groupby('Continent')[df.columns[5:13]].mean().sort_values(by=\"2022 Population\", ascending=False)\ndf3=df2.transpose()\n\n\n#a figura esta comecando com o ano de 2020, mas queremos que comece com 1970, ou seja, precisamos inverter a ordem das variaveis do eixo x\n\ndf3=df3.iloc[::-1]\n\ndf3.plot(kind='line', figsize=(20,10))\n\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n#plotando o grafico boxplot\n\ndf.boxplot(figsize=(20,10))\n\n&lt;Axes: &gt;\n\n\n\n\n\n\ndf.select_dtypes(include='object')\n\n\n\n\n\n\n\n\nCCA3\nCountry\nCapital\nContinent\n\n\n\n\n0\nAFG\nAfghanistan\nKabul\nAsia\n\n\n1\nALB\nAlbania\nTirana\nEurope\n\n\n2\nDZA\nAlgeria\nAlgiers\nAfrica\n\n\n3\nASM\nAmerican Samoa\nPago Pago\nOceania\n\n\n4\nAND\nAndorra\nAndorra la Vella\nEurope\n\n\n...\n...\n...\n...\n...\n\n\n229\nWLF\nWallis and Futuna\nMata-Utu\nOceania\n\n\n230\nESH\nWestern Sahara\nEl Aaiún\nAfrica\n\n\n231\nYEM\nYemen\nSanaa\nAsia\n\n\n232\nZMB\nZambia\nLusaka\nAfrica\n\n\n233\nZWE\nZimbabwe\nHarare\nAfrica\n\n\n\n\n234 rows × 4 columns"
  }
]